spring.application.name=App
server.address=0.0.0.0
server.port=8080
spring.config.import=optional:file:.env[.properties]

# PostgreSQL Database Configuration
spring.datasource.url=jdbc:postgresql://ep-sweet-dawn-a8fyfkzr-pooler.eastus2.azure.neon.tech/neondb?sslmode=require
spring.datasource.username=neondb_owner
spring.datasource.password=npg_uUwLTypG7Pn1
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
allowed.origins=http://localhost:5173,https://www.mgmindia.shop
## OAuth2 Google Client
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.scope=openid,email,profile
spring.security.oauth2.client.registration.google.redirect-uri=${GOOGLE_OAUTH_REDIRECT:http://localhost:8080/login/oauth2/code/google}
spring.security.oauth2.client.authorization-response-base-uri=${GOOGLE_OAUTH_REDIRECT:http://localhost:8080/login/oauth2/code/google}
spring.security.oauth2.client.redirect-uri=${GOOGLE_OAUTH_REDIRECT:http://localhost:8080/login/oauth2/code/google}
spring.security.oauth2.client.frontend-redirect=${GOOGLE_FRONTEND_REDIRECT:http://localhost:5173}
## === Google OAuth2 Provider Info ===
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
spring.security.oauth2.client.provider.google.user-name-attribute=email
#acuater endpoints
management.endpoints.web.exposure.include=health,info,metrics,prometheus
management.endpoint.health.show-details=always
management.endpoints.enabled-by-default=true
server.servlet.session.cookie.secure=true
server.servlet.session.cookie.same-site=None

#spring.security.oauth2.client.registration.google.client-authentication-method=post
#spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code

#jwt.secret=bfhsfsbffaskfsabfsdf337283nbdasj332b3dfsf
#jwt.expiration=86400000

# Show SQL logs (optional for debugging)
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql = true

# CORS (optional if using WebMvcConfigurer)
# You can also configure CORS programmatically
logging.file.name=logs/tts_app.log
logging.level.root=INFO
logging.level.com.tts_app=DEBUG
logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.security.oauth2=DEBUG
logging.level.org.springframework.web=DEBUG
logging.level.org.springframework.boot.autoconfigure.security=DEBUG

management.metrics.export.prometheus.enabled=true

resilience4j.circuitbreaker.instances.ttsService.failureRateThreshold=50
resilience4j.circuitbreaker.instances.ttsService.slidingWindowSize=10
resilience4j.circuitbreaker.instances.ttsService.waitDurationInOpenState=10s

resilience4j.retry.instances.ttsRetry.maxAttempts=3
resilience4j.retry.instances.ttsRetry.waitDuration=1s

resilience4j.timelimiter.instances.ttsLimiter.timeoutDuration=5s



